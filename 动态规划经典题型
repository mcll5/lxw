1、最大序列和
#include<cstdio>
#include<iostream>
#include<climits>
using namespace std;
#define N 1000000
long long a[N+1];
long long dp[N + 1];
long long maxsubsequeue(int n) {
	long long maxinum = -INT_MAX;
	for (int i = 0; i < n; i++) {
		if (i == 0) {
			dp[i] = a[i];
		}
		else {
			dp[i] = max(a[i],a[i]+dp[i-1]);
		}
		maxinum = max(maxinum, dp[i]);
	}
	return maxinum;
}
int main() {
	int n;
	while (scanf_s("%d", &n) != EOF) {
		for (int i = 0; i < n; i++) {
			scanf_s("%lld", &a[i]);
		}
		printf("lld\n", maxsubsequeue(n));
	}
}
2、最大上升子序列和
#include<iostream>
#include<cstdio>
using namespace std;
int a[1010];
int dp[1010];
int main() {
	int n;
	while (scanf_s("%d", &n) != EOF) {
		for (int i = 0; i < n; i++) {
			scanf_s("%d", &a[i]);
		}
		int answer = 0;
		for (int i = 0; i < n; i++) {
			dp[i] = a[i];
			for (int j = 0; j < i; j++) {
				if (a[j] < a[i]) {
					dp[i] = max(dp[i], dp[j] + a[i]);
				}
			}
			answer = max(answer, dp[i]);
		}
		printf("%d\n", answer);
	}
}
4、最长公共子序列
#include<cstdio>
#include<iostream>
using namespace std;
#define N 100
int dp[N][N];
int main() {
	int n, m;
	char s1[N];
	char s2[N];
	scanf_s("%d%d", &n, &m);
	scanf_s("%s%s", s1, s2);
	for (int i = 0; i <= n; i++) {
		for (int j = 0; j <= m; j++) {
			if (i == 0 || j == 0) {
				dp[i][j] = 0;
				continue;
			}
			if (s1[i - 1] == s2[j - 1]) {
				dp[i][j] = dp[i - 1][j - 1] + 1;
			}
			else {
				dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
			}
		}
	}
	printf("%d\n", dp[n][m]);
}

